def is_balanced_parens_1(xs,verbose=False):
    '''
    Takes a string as input and checks whether the parenthesis in the string are balanced.

    >>> is_balanced_parens_1('[[[(){}]()]]')
    True
    >>> is_balanced_parens_1('[[]')
    False
    '''
1   xs = list(xs)
n   for i in range(len(xs)-1):
  1     if verbose:
  0         print('i=',i,'xs=',''.join(xs))
  n     for j in range(len(xs)-1):
    theta(1)if ( xs[j] == '(' and xs[j+1] == ')' ) or \
               ( xs[j] == '[' and xs[j+1] == ']' ) or \
               ( xs[j] == '{' and xs[j+1] == '}' ):
    O(1)        del xs[j+1]
    O(1)        del xs[j]
    O(1)        break

1   return len(xs)==0

del occurs  O(n^2)


def is_balanced_parens_2(xs,verbose=False):
    '''
    Improves on `is_balanced_parens_1` by using a while loop instead of a for loop

    >>> is_balanced_parens_2('[[[(){}]()]]')
    True
    >>> is_balanced_parens_2('[[]')
    False
    '''
1   xs = list(xs)
1   i = 0
n   while i < len(xs)-1:
  1     if verbose:
O(0)        print('i=',i,'xs=',''.join(xs))
O(n)    for j in range(len(xs)-1):
  O(1)      if ( xs[j] == '(' and xs[j+1] == ')' ) or \
               ( xs[j] == '[' and xs[j+1] == ']' ) or \
               ( xs[j] == '{' and xs[j+1] == '}' ):
    1           del xs[j+1]
    1           del xs[j]
    1           i-=1
    1           break
    1   i+=1

1   return len(xs)==0

del occurs also O(n^2)
runtime O(n^3)

def is_balanced_parens_3(xs,verbose=False):
    '''
    Improves on `is_balanced_parens_2` by removing inner for loop

    >>> is_balanced_parens_3('[[[(){}]()]]')
    True
    >>> is_balanced_parens_3('[[]')
    False
    '''
1   xs = list(xs)
1   j = 0
n   while len(xs) > 0 and j < len(xs)-1:
   1    if verbose:
   1        print('j=',j,'xs=',''.join(xs))
   1    if ( xs[j] == '(' and xs[j+1] == ')' ) or \
           ( xs[j] == '[' and xs[j+1] == ']' ) or \
           ( xs[j] == '{' and xs[j+1] == '}' ):
   n        del xs[j+1]
   n        del xs[j]
   1        j -= 1
   1    else:
   1        j += 1

1   return len(xs)==0

del happens O(n)
runtime is O(n^2)

"accidentally quadratic"

10*'['

if __name__=='__main__':
    import doctest
    doctest.testmod()
